import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:cloud_firestore/cloud_firestore.dart';import '../ utils/status_color_utils.dart';import '../Employee/employee_bloc.dart';import '../Employee/employee_event.dart';import '../Employee/employee_state.dart';import '../SuperAdminLogin/admin_event.dart';import '../service/chart_room.dart';import '../service/chat_message.dart';import '../service/employee_modal.dart';import 'chat_bloc.dart';import 'chat_event.dart';import 'chat_state.dart';class ChatScreen extends StatefulWidget {  static const routeName = '/chat';  const ChatScreen({super.key});  static Widget builder(BuildContext context) {    final selectRole = ModalRoute.of(context)!.settings.arguments as SelectRole;    return MultiBlocProvider(      providers: [        BlocProvider(          create:              (context) =>                  ChatBloc()                    ..add(LoadChatRooms(selectRole.employeeModal?.id ?? "")),        ),        BlocProvider(          create: (context) => EmployeeBloc()..add(FetchEmployees()),        ),      ],      child: const ChatScreen(),    );  }  @override  _ChatScreenState createState() => _ChatScreenState();}class _ChatScreenState extends State<ChatScreen> {  @override  Widget build(BuildContext context) {    return Scaffold(      body: SafeArea(        child: Column(          children: [            _buildAppBar(),            Expanded(              child: Container(                decoration: const BoxDecoration(                  color: backgroundDark,                  borderRadius: BorderRadius.only(                    topLeft: Radius.circular(25),                    topRight: Radius.circular(25),                  ),                ),                child: const ChatRoomsList(),              ),            ),          ],        ),      ),      floatingActionButton: FloatingActionButton(        backgroundColor: primaryLight,        child: const Icon(Icons.message, color: textDark),        onPressed: () {          Navigator.push(            context,            MaterialPageRoute(builder: (context) => const ContactsList()),          );        },      ),    );  }  Widget _buildAppBar() {    return Container(      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),      decoration: BoxDecoration(        color: primaryDark,        boxShadow: [          BoxShadow(            color: Colors.black.withOpacity(0.1),            blurRadius: 8,            offset: const Offset(0, 2),          ),        ],      ),      child: Row(        children: [          IconButton(            icon: const Icon(Icons.arrow_back, color: textDark),            onPressed: () => Navigator.pop(context),          ),          const SizedBox(width: 8),          const Text(            'Messages',            style: TextStyle(              color: textDark,              fontSize: 20,              fontWeight: FontWeight.bold,            ),          ),          const Spacer(),          IconButton(            icon: const Icon(Icons.search, color: textDark),            onPressed: () {},          ),          PopupMenuButton<String>(            icon: const Icon(Icons.more_vert, color: textDark),            onSelected: (value) {},            itemBuilder: (BuildContext context) {              return {'Settings', 'Logout'}.map((String choice) {                return PopupMenuItem<String>(                  value: choice,                  child: Text(choice),                );              }).toList();            },          ),        ],      ),    );  }}class ChatRoomsList extends StatefulWidget {  const ChatRoomsList({super.key});  @override  State<ChatRoomsList> createState() => _ChatRoomsListState();}class _ChatRoomsListState extends State<ChatRoomsList> {  final Map<String, EmployeeModal> _employeeCache = {};  @override  Widget build(BuildContext context) {    final selectRole = ModalRoute.of(context)!.settings.arguments as SelectRole;    final currentUserId = selectRole.employeeModal?.id ?? "";    return BlocBuilder<ChatBloc, ChatState>(      builder: (context, chatState) {        if (chatState.isLoadingRooms) {          return Center(child: CircularProgressIndicator(color: primaryLight));        }        if (chatState.chatRooms.isEmpty) {          return Center(            child: Column(              mainAxisAlignment: MainAxisAlignment.center,              children: [                Icon(Icons.forum_outlined, size: 60, color: Colors.grey[400]),                const SizedBox(height: 16),                Text(                  'No conversations yet',                  style: TextStyle(                    color: textDark.withOpacity(0.6),                    fontSize: 18,                    fontWeight: FontWeight.w500,                  ),                ),                const SizedBox(height: 8),                Text(                  'Start by messaging a colleague',                  style: TextStyle(                    color: textDark.withOpacity(0.4),                    fontSize: 14,                  ),                ),              ],            ),          );        }        return ListView.separated(          padding: const EdgeInsets.only(top: 8),          itemCount: chatState.chatRooms.length,          separatorBuilder: (context, index) => const Divider(height: 1),          itemBuilder: (context, index) {            final room = chatState.chatRooms[index];            final otherUserId = room.participantIds.firstWhere(              (id) => id != currentUserId,              orElse: () => '',            );            if (otherUserId.isEmpty) return const SizedBox();            if (_employeeCache.containsKey(otherUserId)) {              return _buildChatItem(                employee: _employeeCache[otherUserId]!,                room: room,                currentUserId: currentUserId,                selectRole: selectRole,              );            }            return FutureBuilder<EmployeeModal?>(              future: _getEmployee(otherUserId),              builder: (context, snapshot) {                final employee = snapshot.data;                if (employee != null) {                  _employeeCache[otherUserId] = employee;                  return _buildChatItem(                    employee: employee,                    room: room,                    currentUserId: currentUserId,                    selectRole: selectRole,                  );                }                return _buildChatItem(                  employee: EmployeeModal(                    id: otherUserId,                    name: 'Unknown User',                    email: '',                    password: '',                    address: '',                    role: '',                    adminId: '',                    departmentId: '',                    departmentName: '',                    managerName: '',                    managerId: '',                  ),                  room: room,                  currentUserId: currentUserId,                  selectRole: selectRole,                );              },            );          },        );      },    );  }  Future<EmployeeModal?> _getEmployee(String userId) async {    return context.read<EmployeeBloc>().state.employees.firstWhere(      (employee) => employee.id == userId,    );  }  Widget _buildChatItem({    required EmployeeModal employee,    required ChatRoom room,    required String currentUserId,    required SelectRole selectRole,  }) {    final hasUnread = true;    return ListTile(      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),      leading: Stack(        children: [          CircleAvatar(            radius: 28,            backgroundColor: const Color(0xFFDFE6E9),            child: Text(              employee.name.isNotEmpty ? employee.name[0].toUpperCase() : '?',              style: const TextStyle(                color: Color(0xFF2D3436),                fontSize: 20,                fontWeight: FontWeight.w500,              ),            ),          ),          if (false) // Replace with actual online status            Positioned(              right: 0,              bottom: 0,              child: Container(                width: 14,                height: 14,                decoration: BoxDecoration(                  color: onlineIndicator,                  shape: BoxShape.circle,                  border: Border.all(color: Colors.white, width: 2),                ),              ),            ),        ],      ),      title: Row(        children: [          Text(            employee.name,            style: TextStyle(              color: textDark,              fontSize: 16,              fontWeight: hasUnread ? FontWeight.bold : FontWeight.w500,            ),          ),          if (hasUnread)            Container(              margin: const EdgeInsets.only(left: 6),              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),              decoration: const BoxDecoration(                color: unreadIndicator,                shape: BoxShape.circle,              ),              child: Text(                '99+',                style: const TextStyle(                  color: Colors.white,                  fontSize: 11,                  fontWeight: FontWeight.bold,                ),              ),            ),        ],      ),      subtitle: Text(        room.lastMessage ?? "",        style: TextStyle(          color: hasUnread ? textDark : Colors.grey,          fontSize: 14,          fontWeight: hasUnread ? FontWeight.w500 : FontWeight.normal,        ),        maxLines: 1,        overflow: TextOverflow.ellipsis,      ),      trailing: Text(        _formatTime(room.lastMessageTime?.toDate()),        style: TextStyle(          color: Colors.grey,          fontSize: 12,          fontWeight: hasUnread ? FontWeight.bold : FontWeight.normal,        ),      ),      onTap:          () => _navigateToChatDetail(            context,            employee: employee,            room: room,            otherUserId: employee.id ?? "",            selectRole: selectRole,          ),    );  }  String _formatTime(DateTime? time) {    if (time == null) return '';    final now = DateTime.now();    final difference = now.difference(time);    if (difference.inDays > 7) {      return '${time.day}/${time.month}/${time.year}';    } else if (difference.inDays > 0) {      return '${difference.inDays}d';    } else if (difference.inHours > 0) {      return '${difference.inHours}h';    } else if (difference.inMinutes > 0) {      return '${difference.inMinutes}m';    } else {      return 'Now';    }  }  void _navigateToChatDetail(    BuildContext context, {    required EmployeeModal? employee,    required ChatRoom room,    required String otherUserId,    required SelectRole selectRole,  }) {    Navigator.push(      context,      MaterialPageRoute(        builder:            (context) => MultiBlocProvider(              providers: [                BlocProvider(                  create:                      (context) =>                          ChatBloc()..add(                            LoadChatRooms(selectRole.employeeModal?.id ?? ""),                          ),                ),                BlocProvider(                  create: (context) => EmployeeBloc()..add(FetchEmployees()),                ),              ],              child: ChatDetailScreen(                name: employee?.name ?? 'Unknown User',                isOnline: false,                roomId: room.id,                otherUserId: otherUserId,                currentUserId: selectRole.employeeModal?.id ?? "",                selectRole: selectRole,              ),            ),      ),    );  }}class ChatDetailScreen extends StatefulWidget {  final String name;  final bool isOnline;  final String roomId;  final String otherUserId;  final String currentUserId;  final SelectRole selectRole;  const ChatDetailScreen({    super.key,    required this.name,    required this.isOnline,    required this.roomId,    required this.otherUserId,    required this.currentUserId,    required this.selectRole,  });  @override  _ChatDetailScreenState createState() => _ChatDetailScreenState();}class _ChatDetailScreenState extends State<ChatDetailScreen> {  final TextEditingController _messageController = TextEditingController();  final ScrollController _scrollController = ScrollController();  final FocusNode _focusNode = FocusNode();  @override  void initState() {    super.initState();    context.read<ChatBloc>().add(      LoadChatMessages(        roomId: widget.roomId,        userId: widget.currentUserId,        otherUserId: widget.otherUserId,      ),    );  }  @override  Widget build(BuildContext context) {    return Scaffold(      backgroundColor: backgroundDark,      appBar: AppBar(        backgroundColor: primaryDark,        elevation: 0,        leading: IconButton(          icon: const Icon(Icons.arrow_back, color: textDark),          onPressed: () => Navigator.pop(context),        ),        title: Row(          children: [            CircleAvatar(              backgroundColor: const Color(0xFFDFE6E9),              child: Text(                widget.name.isNotEmpty ? widget.name[0].toUpperCase() : '?',                style: const TextStyle(color: Color(0xFF2D3436)),              ),            ),            const SizedBox(width: 12),            Column(              crossAxisAlignment: CrossAxisAlignment.start,              children: [                Text(                  widget.name,                  style: const TextStyle(                    color: textDark,                    fontSize: 16,                    fontWeight: FontWeight.w500,                  ),                ),                Text(                  widget.isOnline ? 'Online' : 'Offline',                  style: const TextStyle(color: textDark, fontSize: 12),                ),              ],            ),          ],        ),        actions: [          IconButton(            icon: const Icon(Icons.videocam, color: textDark),            onPressed: () {},          ),          IconButton(            icon: const Icon(Icons.call, color: textDark),            onPressed: () {},          ),          PopupMenuButton<String>(            icon: const Icon(Icons.more_vert, color: textDark),            onSelected: (value) {},            itemBuilder: (BuildContext context) {              return {'View profile', 'Media', 'Clear chat'}.map((                String choice,              ) {                return PopupMenuItem<String>(                  value: choice,                  child: Text(choice),                );              }).toList();            },          ),        ],      ),      body: Column(        children: [          Expanded(            child: Container(              decoration: const BoxDecoration(                image: DecorationImage(                  image: AssetImage('assets/chat_bg.png'),                  fit: BoxFit.cover,                ),              ),              child: BlocBuilder<ChatBloc, ChatState>(                builder: (context, state) {                  final messages = state.getMessagesForRoom(widget.roomId);                  if (messages.isEmpty) {                    return Center(                      child: Column(                        mainAxisAlignment: MainAxisAlignment.center,                        children: [                          Icon(                            Icons.forum_outlined,                            size: 60,                            color: Colors.grey[400],                          ),                          const SizedBox(height: 16),                          Text(                            'No messages yet',                            style: TextStyle(                              color: textDark.withOpacity(0.6),                              fontSize: 18,                              fontWeight: FontWeight.w500,                            ),                          ),                          const SizedBox(height: 8),                          Text(                            'Send your first message',                            style: TextStyle(                              color: textDark.withOpacity(0.4),                              fontSize: 14,                            ),                          ),                        ],                      ),                    );                  }                  return ListView.builder(                    controller: _scrollController,                    reverse: true,                    padding: const EdgeInsets.all(16),                    itemCount: messages.length,                    itemBuilder: (context, index) {                      final message = messages[index];                      return MessageBubble(                        message: message.content,                        time: _formatTime(message.timestamp.toDate()),                        isMe: message.senderId == widget.currentUserId,                        isRead: message.isRead,                      );                    },                  );                },              ),            ),          ),          _buildMessageInput(),        ],      ),    );  }  Widget _buildMessageInput() {    return Container(      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),      child: Row(        children: [          IconButton(            icon: const Icon(Icons.add, color: primaryLight),            onPressed: () {},          ),          Expanded(            child: Container(              decoration: BoxDecoration(                color: backgroundDark,                borderRadius: BorderRadius.circular(25),              ),              child: Row(                children: [                  IconButton(                    icon: const Icon(                      Icons.emoji_emotions_outlined,                      color: Colors.grey,                    ),                    onPressed: () {},                  ),                  Expanded(                    child: TextField(                      controller: _messageController,                      focusNode: _focusNode,                      style: const TextStyle(color: textDark),                      decoration: const InputDecoration(                        hintText: 'Type a message...',                        hintStyle: TextStyle(color: Colors.grey),                        border: InputBorder.none,                      ),                      onSubmitted: (text) => _sendMessage(),                    ),                  ),                  IconButton(                    icon: const Icon(Icons.attach_file, color: Colors.grey),                    onPressed: () {},                  ),                  IconButton(                    icon: const Icon(Icons.camera_alt, color: Colors.grey),                    onPressed: () {},                  ),                ],              ),            ),          ),          const SizedBox(width: 4),          FloatingActionButton(            mini: true,            backgroundColor: primaryLight,            onPressed: _sendMessage,            child: const Icon(Icons.send, color: textDark, size: 20),          ),        ],      ),    );  }  void _sendMessage() {    if (_messageController.text.trim().isNotEmpty) {      final message = ChatMessage(        id: '',        senderId: widget.currentUserId,        senderName: widget.selectRole.employeeModal?.name ?? "",        receiverId: widget.otherUserId,        content: _messageController.text,        timestamp: Timestamp.fromDate(DateTime.now()),        roomId: widget.roomId,        isRead: false,        status: MessageStatus.sent,      );      context.read<ChatBloc>().add(SendMessage(message));      _messageController.clear();    }  }  String _formatTime(DateTime time) {    return '${time.hour}:${time.minute.toString().padLeft(2, '0')}';  }}class MessageBubble extends StatelessWidget {  final String message;  final String time;  final bool isMe;  final bool isRead;  const MessageBubble({    super.key,    required this.message,    required this.time,    required this.isMe,    this.isRead = false,  });  @override  Widget build(BuildContext context) {    return Padding(      padding: const EdgeInsets.symmetric(vertical: 4),      child: Align(        alignment: isMe ? Alignment.centerRight : Alignment.centerLeft,        child: ConstrainedBox(          constraints: BoxConstraints(            maxWidth: MediaQuery.of(context).size.width * 0.75,          ),          child: Container(            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),            decoration: BoxDecoration(              color: isMe ? bubbleMe : bubbleOther,              borderRadius: BorderRadius.only(                topLeft: const Radius.circular(18),                topRight: const Radius.circular(18),                bottomLeft: Radius.circular(isMe ? 18 : 4),                bottomRight: Radius.circular(isMe ? 4 : 18),              ),              boxShadow: [                BoxShadow(                  color: Colors.black.withOpacity(0.1),                  blurRadius: 2,                  offset: const Offset(0, 1),                ),              ],            ),            child: Column(              crossAxisAlignment: CrossAxisAlignment.start,              children: [                Text(                  message,                  style: const TextStyle(color: textDark, fontSize: 16),                ),                const SizedBox(height: 4),                Row(                  mainAxisSize: MainAxisSize.min,                  children: [                    Text(                      time,                      style: const TextStyle(color: Colors.grey, fontSize: 12),                    ),                    if (isMe) ...[                      const SizedBox(width: 4),                      Icon(                        isRead ? Icons.done_all : Icons.done,                        size: 16,                        color: isRead ? primaryLight : Colors.grey,                      ),                    ],                  ],                ),              ],            ),          ),        ),      ),    );  }}class ContactsList extends StatelessWidget {  const ContactsList({super.key});  @override  Widget build(BuildContext context) {    final selectRole = ModalRoute.of(context)!.settings.arguments as SelectRole;    return Scaffold(      appBar: AppBar(        title: const Text('Select Contact'),        backgroundColor: primaryDark,      ),      body: BlocBuilder<EmployeeBloc, EmployeeState>(        builder: (context, state) {          if (state.isLoading) {            return Center(              child: CircularProgressIndicator(color: primaryLight),            );          }          if (state.employees.isEmpty) {            return Center(              child: Column(                mainAxisAlignment: MainAxisAlignment.center,                children: [                  Icon(                    Icons.people_alt_outlined,                    size: 60,                    color: Colors.grey[400],                  ),                  const SizedBox(height: 16),                  Text(                    'No contacts available',                    style: TextStyle(                      color: textDark.withOpacity(0.6),                      fontSize: 18,                      fontWeight: FontWeight.w500,                    ),                  ),                ],              ),            );          }          return ListView.separated(            padding: const EdgeInsets.only(top: 8),            itemCount: state.employees.length,            separatorBuilder: (context, index) => const Divider(height: 1),            itemBuilder: (context, index) {              final employee = state.employees[index];              if (employee.id == selectRole.employeeModal?.id) {                return const SizedBox();              }              return ListTile(                leading: CircleAvatar(                  radius: 24,                  backgroundColor: const Color(0xFFDFE6E9),                  child: Text(                    employee.name.isNotEmpty                        ? employee.name[0].toUpperCase()                        : '?',                    style: const TextStyle(color: Color(0xFF2D3436)),                  ),                ),                title: Text(                  employee.name,                  style: const TextStyle(                    color: textDark,                    fontWeight: FontWeight.w500,                  ),                ),                subtitle: Text(                  employee.departmentName ?? '',                  style: const TextStyle(color: Colors.grey),                ),                trailing: const Icon(                  Icons.arrow_forward_ios,                  size: 16,                  color: Colors.grey,                ),                onTap: () async {                  final roomId = _generateRoomId(                    selectRole.employeeModal?.id ?? "",                    employee.id,                  );                  context.read<ChatBloc>().add(                    CreateChatRoom(                      currentUserId: selectRole.employeeModal?.id ?? "",                      otherUserId: employee.id,                    ),                  );                  Navigator.push(                    context,                      MaterialPageRoute(                      builder:                          (context) => ChatDetailScreen(                            name: employee.name,                            isOnline: false,                            roomId: roomId,                            otherUserId: employee.id,                            currentUserId: selectRole.employeeModal?.id ?? "",                            selectRole: selectRole,                          ),                    ),                  );                },              );            },          );        },      ),    );  }  String _generateRoomId(String id1, String id2) {    final ids = [id1, id2]..sort();    return '${ids[0]}_${ids[1]}';  }}